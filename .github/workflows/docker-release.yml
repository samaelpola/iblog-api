name: Build & Push Docker Image on Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tags:
        description: "Release tags (e.g. v1.2.3)"
        required: true

env:
  IMAGE_NAME: iblog-api

jobs:
  run-lint-test:
    name: Run Lint Test Workflow
    uses: ./.github/workflows/lint-test.yml
    secrets: inherit

  build-push:
    needs: run-lint-test
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.extract_tag.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Tag Format (workflow_dispatch only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG=${{ github.event.inputs.tags }}
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: '$TAG'. Must be like 'v1.2.3'."
            exit 1
          fi

      - name: Extract Tag Name
        id: extract_tag
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_TAG: ${{ github.event.inputs.tags || '' }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            TAG="$INPUT_TAG"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          CLEAN_TAG="${TAG#v}"
          echo "RELEASE_VERSION=$CLEAN_TAG" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$TAG" >> $GITHUB_OUTPUT
          echo "Using version: '$CLEAN_TAG'"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          context: .
          push: true
          target: prod
          tags: |
            ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
            ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build-push
    name: Deploy to production
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y openssh-client gettext-base

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Generate an environment file with envsubst
        env:
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          RELEASE_VERSION: ${{ needs.build-push.outputs.RELEASE_VERSION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_IN }}
          JWT_REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_IN }}
          APP_PORT: ${{ secrets.APP_PORT }}
          APP_USE_SSL: ${{ secrets.APP_USE_SSL }}
          CORS_ALLOW_ORIGINS: ${{ secrets.CORS_ALLOW_ORIGINS }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        run: |
          envsubst < production/env.production.template > .env 

      - name: Copy environment file file to server
        run: |
          scp .env ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/var/api/.env

      - name: Deploy via Docker Compose
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd /var/api
            docker compose up app -d --force-recreate
          EOF

      - name: Clean up
        run: rm -f .env
